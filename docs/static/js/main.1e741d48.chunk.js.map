{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","elem","preventDefault","trim","length","cats","type","value","onChange","elemento","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGif","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAqBxC,OACA,0BAAMC,SAZW,SAACC,GAClBA,EAAKC,iBAGFJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,OAQd,2BAEIO,KAAK,OACLC,MAAOT,EACPU,SAxBc,SAACC,GAEvBV,EAAcU,EAASC,OAAOH,Y,uBCJzBI,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACZV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATrB,kBAcZM,GAdY,4CAAH,sDCHPO,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAIlC,OAFAc,QAAQC,IAAIN,EAAGC,EAAMV,GAGjB,yBAAKgB,UAAU,0CACX,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,2BAAIA,KCJHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECCZ,SAACA,GAAY,IAAD,EAETf,mBAAS,CACnCsB,KAAK,GACLe,SAAQ,IAJ2B,mBAE5BC,EAF4B,KAErBC,EAFqB,KAoBnC,OAZHC,qBAAU,WAEH1B,EAAQC,GACP0B,MAAK,SAAAhB,GAAMc,EAAS,CACjBjB,KAAKG,EACLY,SAAQ,SAKjB,CAACtB,IAEOuB,EDjBuBI,CAAY3B,GAA9Ba,EAJuB,EAI5BN,KAAYe,EAJgB,EAIhBA,QAiBnB,OACI,oCACI,wBAAIJ,UAAU,0CAA0ClB,GAExDsB,GAAW,uBAAGJ,UAAU,yCAAb,WAEX,yBAAKA,UAAU,aAIHL,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIkB,IAAKlB,EAAIC,IACLD,UEnC9BmB,EAAe,WAAI,MAIe5C,mBAAS,CAAC,cAJzB,mBAId6C,EAJc,KAIF9C,EAJE,KAarB,OACI,oCAEC,8CAGA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAGG,4BAEQ8C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACI4B,IAAK5B,EACLA,SAAUA,UCzBtC+B,IAASC,OACN,kBAAC,EAAD,MACDC,SAASC,eAAe,U","file":"static/js/main.1e741d48.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (elemento) =>{\r\n      \r\n        setinputValue(elemento.target.value);\r\n\r\n    }\r\n\r\n    const handleSubmit = (elem) =>{\r\n        elem.preventDefault();\r\n        \r\n\r\n        if(inputValue.trim().length>2){\r\n            setCategories(cats => [inputValue,...cats]);\r\n            setinputValue('');\r\n        }\r\n\r\n\r\n    }\r\n        return (\r\n        <form onSubmit = {handleSubmit}>\r\n\r\n            <input  \r\n\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n\r\n        </form>\r\n            \r\n\r\n           \r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n\r\n    setCategories: PropTypes.func.isRequired\r\n    \r\n}\r\n\r\n","\r\n\r\n     //El getGifs lo muevo a un archivo en particular ya que no tenia relacion con este componente. \r\n    //Esta funcion va a devolver una promesa, antes devolvia las imagenes de gift\r\n\r\nexport const getGifs = async(category)=>{\r\n    //Usamos encondeURI para eliminar los espacios\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=veJFVQzGXDLQC7EbSMcZxzh0AAKQ4jpd`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n           url: img.images.downsized_medium.url\r\n        }\r\n\r\n    })\r\n    \r\n    return gifs;\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    \r\n    console.log(id,title,url);\r\n   \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport { useFetchGif } from '../hooks/useFetchGif'\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n    const {data:images,loading} = useFetchGif(category);\r\n\r\n\r\n\r\n\r\n\r\n    // //useEffect permite poder ejecutar cierto codigo de manera condicional ejemplo para que no se dispare la peticion http ante un minimo cambio\r\n    // //Primer argumento le pasamos una funcion(la funcion que qeuremos que ejecute), 2do argumento le pasamos un argumento vacio, eso significa qu ese ejcutar√° una vez sola\r\n\r\n    //  //El getGifs lo muevo a un archivo en particular ya que no tenia relacion con este componente. \r\n    // //Luego lo exporto para poder usarlo en este archivo y como devuelve una promesa tengo que hacer el .then\r\n   \r\n    \r\n\r\n    \r\n\r\n  \r\n    return (\r\n        <>\r\n            <h3 className=\"card animate__animated animate__fadeIn\">{category}</h3>\r\n            {/* PAra mostrar mientras carga. Tambien usamos operador ternario */}\r\n           {loading && <p className=\"card animate__animated animate__flash\">Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                        \r\n                    {\r\n\r\n                        images.map(img =>(\r\n                            <GifGridItem\r\n                                key={img.id}\r\n                                {...img}\r\n                            />\r\n                        ))\r\n\r\n                    }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","//Para saber que es un hook com standar se pone la palabra use adelante\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n//creamos un customHook\r\nexport const useFetchGif = (category)=>{\r\n\r\n    const [state, setState] = useState({\r\n    data:[],\r\n    loading:true\r\n\r\n    });\r\n\r\n useEffect(()=>{\r\n\r\n        getGifs(category)\r\n        .then(img=>{setState({\r\n            data:img,\r\n            loading:false\r\n            })\r\n        })\r\n    \r\n\r\n },[category])\r\n\r\n    return state; //retorna la data que es un arreglo [], con el loading en true\r\n}\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = ()=>{\r\n\r\n    //const categories =['One Punch','Samurai X','Dragon Ball']; --> No puedo hacerlo de esta forma porque si quiero agregar un valor al arreglo no puedo\r\n    //Uso el useState  \r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = ()=>{\r\n    //     //Uso el spred para matener las categorias anteriores y agregar una nueva ya que sino piso las categorias anteriores y cambia el tipo del state.\r\n    //     setCategories([...categories,'HunterXHunter']);\r\n    //     console.log(categories);\r\n\r\n    // }\r\n\r\n    return(\r\n        <>\r\n\r\n         <h2> GifExpertApp </h2>\r\n         {/* Le puedo pasar propiedades/funcoines a AddCategory, en este caso le pasamos una funcion\r\n         haciendo referencia al setCategories de arriba */}\r\n         <AddCategory setCategories = {setCategories}/>\r\n         <hr></hr>\r\n\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category =>(\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n\r\n                }\r\n\r\n            </ol>\r\n        \r\n         </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport {\r\n    GifExpertApp\r\n    }\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport{GifExpertApp} from './GifExpertApp';\n\n\n\nReactDOM.render(\n   <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}